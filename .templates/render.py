import ruamel.yaml
import os
import re

yaml = ruamel.yaml.YAML()

def merge(a, b):
            key = None
            if a is None or isinstance(a, (str, float, int)):
                a = b
            elif isinstance(a, list):
                if isinstance(b, list):
                    if not a == b:
                        a.extend(b)
                else:
                    if not a == b:
                        a.append(b)
            elif isinstance(a, dict):
                if isinstance(b, dict):
                    for key in b:
                        if key in a:
                            a[key] = merge(a[key], b[key])
                        else:
                            a[key] = b[key]
            return a

class RenderTemplateItem:
    def __init__(self, globl, name, config, type):
        self.type = type
        self.name = name
        self.replacements = {
            "__NAME__": name,
            "__CONFIG__": config,
            "__GLOBAL__": globl
        }
        self.templates = os.path.abspath(os.path.dirname(__file__))

    def render(self):
        files = {}
        with open(os.path.join(self.templates,self.type, "definition.yaml")) as f:
            files["definition"] = f.read()

        with open(os.path.join(self.templates,self.type, "helpers.tpl")) as f:
            files["helpers"] = f.read()

        with open(os.path.join(self.templates,self.type, "values.yaml")) as f:
            files["values"] = f.read()

        for name, file in files.items():
            for f,t in self.replacements.items():
                file = file.replace(f,t)
            files[name] = file
            
        return files
    

class RenderTemplate:
    def __init__(self,globl):
        self.globl = globl
        self.typeMap = {
            'pvc': 'persistance',
            'serviceaccount': 'serviceAccount'
        }
        self.items = []
    def setTypeMap(self, typeMap):
        self.typeMap = typeMap
        return self
    def addResource(self,name, type):
        self.items.append(RenderTemplateItem(self.globl, name, self.typeMap[type], type))
        return self
    def render(self):
        mergedValues = {}
        mergedHelpers = ""
        resources = {}

        for item in self.items:
            i = item.render()
            resources[item.name + '-' + item.type + '.yaml'] = i['definition']
            mergedValues = merge(mergedValues, yaml.load(i["values"]))
            mergedHelpers = mergedHelpers + i["helpers"] + "\n"

        return (mergedValues, mergedHelpers, resources)
    def renderAndWrite(self, path, resourcesPath = "templates"):
        generatedByString = "# Generated by HelmRenderer.py"
        values, helper, resources = self.render()
        path = os.path.abspath(path)
        resourcePath = os.path.join(path, resourcesPath)
        if not os.path.exists(path):
            os.mkdir(path)
        if not os.path.exists(resourcePath):
            os.mkdir(resourcePath)
            
        for name,resource in resources.items():
            with open(os.path.join(resourcePath,name), 'w') as f:
                f.write(generatedByString + "\n\n" + resource)
        
        compiledRegex = re.compile(r"#AUTOGEN[\s\S]*#ENDAUTOGEN", flags=re.MULTILINE)
        helper = "#AUTOGEN\n" + helper + "\n#ENDAUTOGEN"

        with open(os.path.join(path,"values.yaml"), 'a'):
            pass
        with open(os.path.join(resourcePath,"_helpers.tpl"), 'a'):
            pass

        with open(os.path.join(resourcePath,"_helpers.tpl"), 'r+') as f:
            fc = f.read()
            helperContent = compiledRegex.sub(helper, fc).strip()
            if not helper in helperContent:
                helperContent = helperContent + "\n" + helper
            f.seek(0)
            f.write(helperContent)
            f.truncate()
        

        with open(os.path.join(path,"values.yaml"), 'r+') as f:
            fc = f.read()
            ym = yaml.load(fc)
            ym = merge(ym, values)
            f.seek(0)
            yaml.dump(ym,f)
            f.truncate()
